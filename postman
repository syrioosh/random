const fs = require('fs');
const axios = require('axios');

const postmanCollection = JSON.parse(fs.readFileSync('/path/to/postman_collection.json', 'utf-8'));
const postmanEnvironment = JSON.parse(fs.readFileSync('/path/to/postman_environment.json', 'utf-8')); // Load environment file
const jestTestOutput = [];

// Parse Postman environment variables into a key-value object
const environmentVariables = postmanEnvironment.values.reduce((obj, item) => ({
  ...obj,
  [item.key]: item.value,
}), {});

postmanCollection.item.forEach((item) => {
    const { method, header, body, url } = item.request;

    let headers = {};
    if (header && header.length > 0) {
        headers = header.reduce((accumulated, current) => ({
          ...accumulated,
          [current.key]: current.value.replace(/\{\{(\w+)\}\}/g, (_, key) => environmentVariables[key] || _)
        }), {});
    }

    let data = null;
    if (body && body.mode === 'raw' && body.raw) {
        try {
            data = JSON.parse(body.raw.replace(/\{\{(\w+)\}\}/g, (_, key) => environmentVariables[key] || _));
        } catch (e) {
            console.warn(`Couldn't parse request body for ${item.name}`);
        }
    }

    const endpointUrl = `${url.protocol}://${url.host.join('')}${url.path.join('/')}`.replace(/\{\{(\w+)\}\}/g, (_, key) => environmentVariables[key] || _);

    const test = `
        test('${item.name}', async () => {
            const response = await axios({
                method: '${method.toLowerCase()}',
                url: '${endpointUrl}',
                headers: ${JSON.stringify(headers)},
                data: ${JSON.stringify(data)},
            });
            expect(response.status).toBe(200);
        });
    `;
    jestTestOutput.push(test);
});

fs.writeFileSync('/path/to/jest_tests.js', jestTestOutput.join('\n'));
